FROM ubuntu:20.04
ENV DEBIAN_FRONTEND noninteractive
RUN apt-get -y update && \
    apt-get install -y curl git-core xz-utils build-essential zlib1g-dev libreadline-dev libssl-dev wget unzip sudo gnupg2 dirmngr cmake pkg-config autoconf && \
    rm -rf /var/lib/apt/lists/*

# Add "rvm" as system group, to avoid conflicts with host GIDs typically starting with 1000
RUN groupadd -r rvm && useradd -r -g rvm -G sudo -p "" --create-home rvm

# Make sure rvm and later settings are available in interactive and non-interactive shells
RUN echo "source /etc/profile.d/rvm.sh" >> /etc/rubybashrc && \
    echo "source /etc/rubybashrc" >> /etc/bashrc && \
    echo "source /etc/rubybashrc" >> /etc/bash.bashrc
ENV BASH_ENV /etc/rubybashrc

USER rvm

RUN mkdir ~/.gnupg && \
    chmod 700 ~/.gnupg && \
    echo "disable-ipv6" >> ~/.gnupg/dirmngr.conf

# install rvm, RVM 1.26.0+ has signed releases, source rvm for usage outside of package scripts
RUN gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB && \
    (curl -L http://get.rvm.io | sudo bash) && \
    bash -c " \
        source /etc/rubybashrc && \
        rvm autolibs disable && \
        rvmsudo rvm cleanup all "

# Import patch files for ruby and gems
COPY build/patches /home/rvm/patches/

# install rubies and fix permissions on
ENV RVM_RUBIES 2.5.9 3.1.0
RUN bash -c " \
    export CFLAGS='-s -O3 -fno-fast-math -fPIC' && \
    for v in ${RVM_RUBIES} ; do \
        rvm install \$v --patch \$(echo ~/patches/ruby-\$v/* | tr ' ' ','); \
    done && \
    rvm cleanup all && \
    find /usr/local/rvm -type d -print0 | sudo xargs -0 chmod g+sw "

# Install rake-compiler and typical gems in all Rubies
# do not generate documentation for gems
# TODO: stop pinning rubygems to 3.3.20 once https://github.com/rake-compiler/rake-compiler/pull/209 is merged
RUN echo "gem: --no-ri --no-rdoc" >> ~/.gemrc && \
    bash -c " \
        rvm all do gem update --system=3.3.20 --no-document && \
        rvm all do gem install --no-document bundler 'bundler:~>1.16' 'rake-compiler:1.1.6' hoe mini_portile rubygems-tasks mini_portile2 && \
        find /usr/local/rvm -type d -print0 | sudo xargs -0 chmod g+sw "

# Install rake-compiler's cross rubies in global dir instead of /root
RUN sudo mkdir -p /usr/local/rake-compiler && \
    sudo chown rvm.rvm /usr/local/rake-compiler && \
    ln -s /usr/local/rake-compiler ~/.rake-compiler

# Add cross compilers for Windows and Linux
USER root

COPY --from=larskanis/mingw64-ucrt:20.04 \
    /build/binutils-mingw-w64-x86-64_2.34-6ubuntu1.3+8.8_amd64.deb \
    /build/g++-mingw-w64-x86-64_9.3.0-17ubuntu1~20.04+22~exp1ubuntu4_amd64.deb \
    /build/gcc-mingw-w64-base_9.3.0-17ubuntu1~20.04+22~exp1ubuntu4_amd64.deb \
    /build/gcc-mingw-w64-x86-64_9.3.0-17ubuntu1~20.04+22~exp1ubuntu4_amd64.deb \
    /build/mingw-w64-common_7.0.0-2_all.deb \
    /build/mingw-w64-x86-64-dev_7.0.0-2_all.deb \
    /debs/
RUN dpkg -i /debs/*.deb


RUN bash -c " \
        rvm alias create default 3.1.0 && \
        rvm use default "



# Patch rake-compiler to build and install static libraries for Linux rubies
USER rvm
COPY build/patches2 /home/rvm/patches/
RUN bash -c " \
    for v in ${RVM_RUBIES} ; do \
      cd /usr/local/rvm/gems/ruby-\$v/gems/rake-compiler-1.1.6 && \
      echo applying patches to ruby-\$v /home/rvm/patches/rake-compiler-1.1.6/*.patch && \
      ( git apply /home/rvm/patches/rake-compiler-1.1.6/*.patch || true ) \
    done "

# Patch rubies for cross build
#USER root
#RUN bash -c " \
#    for v in 2.7.0 3.0.0 3.1.0 ; do \
#      curl -SL http://cache.ruby-lang.org/pub/ruby/\${v:0:3}/ruby-\$v.tar.xz | tar -xJC /root/ && \
#      cd /root/ruby-\$v && \
#      git apply /home/rvm/patches/ruby-\$v/*.patch && \
#      cd .. && \
#      mkdir -p /usr/local/rake-compiler/sources/ && \
#      tar cjf /usr/local/rake-compiler/sources/ruby-\$v.tar.bz2 ruby-\$v && \
#      chown rvm /usr/local/rake-compiler -R && \
#      rm -rf /root/ruby-\$v ; \
#    done "
#USER rvm

ENV XRUBIES 3.2.0-rc1
# Build xruby versions in parallel
# Then cleanup all build artifacts
RUN bash -c " \
    rvm use 3.1.0 && \
    export CPPFLAGS='-D__USE_MINGW_ANSI_STDIO=1' && \
    export CFLAGS='-O1 -fno-omit-frame-pointer -fno-fast-math -fstack-protector-strong -s' && \
    export LDFLAGS='-pipe -s' && \
    export LIBS='-l:libssp.a' && \
     \
    export MAKE='make V=1 -j`nproc`' && \
    rake-compiler cross-ruby VERSION=$XRUBIES HOST=x86_64-w64-mingw32 && \
    rm -rf ~/.rake-compiler/builds ~/.rake-compiler/sources && \
    find /usr/local/rvm -type d -print0 | sudo xargs -0 chmod g+sw "
ENV XRUBIES 3.1.0
# Build xruby versions in parallel
# Then cleanup all build artifacts
RUN bash -c " \
    rvm use 3.1.0 && \
    export CPPFLAGS='-D__USE_MINGW_ANSI_STDIO=1' && \
    export CFLAGS='-O1 -fno-omit-frame-pointer -fno-fast-math -fstack-protector-strong -s' && \
    export LDFLAGS='-pipe -s' && \
    export LIBS='-l:libssp.a' && \
     \
    export MAKE='make V=1 -j`nproc`' && \
    rake-compiler cross-ruby VERSION=$XRUBIES HOST=x86_64-w64-mingw32 && \
    rm -rf ~/.rake-compiler/builds ~/.rake-compiler/sources && \
    find /usr/local/rvm -type d -print0 | sudo xargs -0 chmod g+sw "


# RubyInstaller doesn't install libgcc -> link it static.
RUN find /usr/local/rake-compiler/ruby/*mingw*/ -name rbconfig.rb | while read f ; do sed -i 's/."LDFLAGS". = "/&-static-libgcc /' $f ; done
# Raise Windows-API to Vista (affects ruby < 2.6 only)
RUN find /usr/local/rake-compiler/ruby -name rbconfig.rb | while read f ; do sed -i 's/0x0501/0x0600/' $f ; done
# Don't link to static libruby
RUN find /usr/local/rake-compiler/ruby -name lib*-ruby*.dll.a | while read f ; do n=`echo $f | sed s/.dll//` ; mv $f $n ; done

USER root

# Fix paths in rake-compiler/config.yml
RUN sed -i -- "s:/root/.rake-compiler:/usr/local/rake-compiler:g" /usr/local/rake-compiler/config.yml


# Install wrappers for strip commands as a workaround for "Protocol error" in boot2docker.
COPY build/strip_wrapper /root/
RUN mv /usr/bin/x86_64-w64-mingw32-strip /usr/bin/x86_64-w64-mingw32-strip.bin && \
    ln /root/strip_wrapper /usr/bin/x86_64-w64-mingw32-strip

# Use posix pthread for mingw so that C++ standard library for thread could be
# available such as std::thread, std::mutex, so on.
# https://sourceware.org/pthreads-win32/
RUN printf "1\n" | update-alternatives --config x86_64-w64-mingw32-gcc && \
    printf "1\n" | update-alternatives --config x86_64-w64-mingw32-g++



# Install SIGINT forwarder
COPY build/sigfw.c /root/
RUN gcc $HOME/sigfw.c -o /usr/bin/sigfw

# Install user mapper
COPY build/runas /usr/bin/
COPY build/rcd-env.sh /etc/profile.d/
RUN echo "source /etc/profile.d/rcd-env.sh" >> /etc/rubybashrc

# Install sudoers configuration
COPY build/sudoers /etc/sudoers.d/rake-compiler-dock

ENV RUBY_CC_VERSION 3.2.0:3.1.0:3.0.0:2.7.0:2.6.0:2.5.0:2.4.0

CMD bash
